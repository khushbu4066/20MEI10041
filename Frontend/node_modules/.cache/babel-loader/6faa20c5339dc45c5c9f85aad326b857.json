{"ast":null,"code":"import { isConstantNode, isParenthesisNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { createUtil } from './simplify/util.js';\nimport { createSimplifyConstant } from './simplify/simplifyConstant.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { createEmptyMap, createMap } from '../../utils/map.js';\nvar name = 'simplify';\nvar dependencies = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', 'resolve', 'simplifyCore', '?fraction', '?bignumber', 'mathWithTransform', 'matrix', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createSimplify = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    parse,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    isZero,\n    equal,\n    resolve,\n    simplifyCore,\n    fraction,\n    bignumber,\n    mathWithTransform,\n    matrix,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  var simplifyConstant = createSimplifyConstant({\n    typed,\n    config,\n    mathWithTransform,\n    matrix,\n    fraction,\n    bignumber,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    SymbolNode\n  });\n  var {\n    hasProperty,\n    isCommutative,\n    isAssociative,\n    mergeContext,\n    flatten,\n    unflattenr,\n    unflattenl,\n    createMakeNodeFunction,\n    defaultContext,\n    realContext,\n    positiveContext\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n  /**\n   * Simplify an expression tree.\n   *\n   * A list of rules are applied to an expression, repeating over the list until\n   * no further changes are made.\n   * It's possible to pass a custom set of rules to the function as second\n   * argument. A rule can be specified as an object, string, or function:\n   *\n   *     const rules = [\n   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\n   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',\n   *       function (node) {\n   *         // ... return a new node or return the node unchanged\n   *         return node\n   *       }\n   *     ]\n   *\n   * String and object rules consist of a left and right pattern. The left is\n   * used to match against the expression and the right determines what matches\n   * are replaced with. The main difference between a pattern and a normal\n   * expression is that variables starting with the following characters are\n   * interpreted as wildcards:\n   *\n   * - 'n' - matches any Node\n   * - 'c' - matches any ConstantNode\n   * - 'v' - matches any Node that is not a ConstantNode\n   *\n   * The default list of rules is exposed on the function as `simplify.rules`\n   * and can be used as a basis to built a set of custom rules.\n   *\n   * To specify a rule as a string, separate the left and right pattern by '->'\n   * When specifying a rule as an object, the following keys are meaningful:\n   * - l - the left pattern\n   * - r - the right pattern\n   * - s - in lieu of l and r, the string form that is broken at -> to give them\n   * - repeat - whether to repeat this rule until the expression stabilizes\n   * - assuming - gives a context object, as in the 'context' option to\n   *     simplify. Every property in the context object must match the current\n   *     context in order, or else the rule will not be applied.\n   * - imposeContext - gives a context object, as in the 'context' option to\n   *     simplify. Any settings specified will override the incoming context\n   *     for all matches of this rule.\n   *\n   * For more details on the theory, see:\n   *\n   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)\n   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)\n   *\n   *  An optional `options` argument can be passed as last argument of `simplify`.\n   *  Currently available options (defaults in parentheses):\n   *  - `consoleDebug` (false): whether to write the expression being simplified\n   *    and any changes to it, along with the rule responsible, to console\n   *  - `context` (simplify.defaultContext): an object giving properties of\n   *    each operator, which determine what simplifications are allowed. The\n   *    currently meaningful properties are commutative, associative,\n   *    total (whether the operation is defined for all arguments), and\n   *    trivial (whether the operation applied to a single argument leaves\n   *    that argument unchanged). The default context is very permissive and\n   *    allows almost all simplifications. Only properties differing from\n   *    the default need to be specified; the default context is used as a\n   *    fallback. Additional contexts `simplify.realContext` and\n   *    `simplify.positiveContext` are supplied to cause simplify to perform\n   *    just simplifications guaranteed to preserve all values of the expression\n   *    assuming all variables and subexpressions are real numbers or\n   *    positive real numbers, respectively. (Note that these are in some cases\n   *    more restrictive than the default context; for example, the default\n   *    context will allow `x/x` to simplify to 1, whereas\n   *    `simplify.realContext` will not, as `0/0` is not equal to 1.)\n   *  - `exactFractions` (true): whether to try to convert all constants to\n   *    exact rational numbers.\n   *  - `fractionsLimit` (10000): when `exactFractions` is true, constants will\n   *    be expressed as fractions only when both numerator and denominator\n   *    are smaller than `fractionsLimit`.\n   *\n   * Syntax:\n   *\n   *     simplify(expr)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules, scope)\n   *     simplify(expr, rules, scope, options)\n   *     simplify(expr, scope)\n   *     simplify(expr, scope, options)\n   *\n   * Examples:\n   *\n   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node \"2 * x\"\n   *     math.simplify('2 * 3 * x', {x: 4})        // Node \"24\"\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\n   *     math.simplify(f)                          // Node \"2 * x\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node \"x * 2 / 5\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node \"0.4 * x\"\n   *\n   * See also:\n   *\n   *     simplifyCore, derivative, evaluate, parse, rationalize, resolve\n   *\n   * @param {Node | string} expr\n   *            The expression to be simplified\n   * @param {Array<{l:string, r: string} | string | function>} [rules]\n   *            Optional list with custom rules\n   * @return {Node} Returns the simplified form of `expr`\n   */\n\n  var simplify = typed('simplify', {\n    string: function string(expr) {\n      return this(parse(expr), this.rules, createEmptyMap(), {});\n    },\n    'string, Map | Object': function stringMapObject(expr, scope) {\n      return this(parse(expr), this.rules, scope, {});\n    },\n    'string, Map | Object, Object': function stringMapObjectObject(expr, scope, options) {\n      return this(parse(expr), this.rules, scope, options);\n    },\n    'string, Array': function stringArray(expr, rules) {\n      return this(parse(expr), rules, createEmptyMap(), {});\n    },\n    'string, Array, Map | Object': function stringArrayMapObject(expr, rules, scope) {\n      return this(parse(expr), rules, scope, {});\n    },\n    'string, Array, Map | Object, Object': function stringArrayMapObjectObject(expr, rules, scope, options) {\n      return this(parse(expr), rules, scope, options);\n    },\n    'Node, Map | Object': function NodeMapObject(expr, scope) {\n      return this(expr, this.rules, scope, {});\n    },\n    'Node, Map | Object, Object': function NodeMapObjectObject(expr, scope, options) {\n      return this(expr, this.rules, scope, options);\n    },\n    Node: function Node(expr) {\n      return this(expr, this.rules, createEmptyMap(), {});\n    },\n    'Node, Array': function NodeArray(expr, rules) {\n      return this(expr, rules, createEmptyMap(), {});\n    },\n    'Node, Array, Map | Object': function NodeArrayMapObject(expr, rules, scope) {\n      return this(expr, rules, scope, {});\n    },\n    'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {\n      return this(expr, rules, createMap(scope), options);\n    },\n    'Node, Array, Map, Object': function NodeArrayMapObject(expr, rules, scope, options) {\n      var debug = options.consoleDebug;\n      rules = _buildRules(rules, options.context);\n      var res = resolve(expr, scope);\n      res = removeParens(res);\n      var visited = {};\n      var str = res.toString({\n        parenthesis: 'all'\n      });\n\n      while (!visited[str]) {\n        visited[str] = true;\n        _lastsym = 0; // counter for placeholder symbols\n\n        var laststr = str;\n        if (debug) console.log('Working on: ', str);\n\n        for (var i = 0; i < rules.length; i++) {\n          var rulestr = '';\n\n          if (typeof rules[i] === 'function') {\n            res = rules[i](res, options);\n            if (debug) rulestr = rules[i].name;\n          } else {\n            flatten(res, options.context);\n            res = applyRule(res, rules[i], options.context);\n\n            if (debug) {\n              rulestr = \"\".concat(rules[i].l.toString(), \" -> \").concat(rules[i].r.toString());\n            }\n          }\n\n          if (debug) {\n            var newstr = res.toString({\n              parenthesis: 'all'\n            });\n\n            if (newstr !== laststr) {\n              console.log('Applying', rulestr, 'produced', newstr);\n              laststr = newstr;\n            }\n          }\n          /* Use left-heavy binary tree internally,\n           * since custom rule functions may expect it\n           */\n\n\n          unflattenl(res, options.context);\n        }\n\n        str = res.toString({\n          parenthesis: 'all'\n        });\n      }\n\n      return res;\n    }\n  });\n  simplify.defaultContext = defaultContext;\n  simplify.realContext = realContext;\n  simplify.positiveContext = positiveContext;\n\n  function removeParens(node) {\n    return node.transform(function (node, path, parent) {\n      return isParenthesisNode(node) ? removeParens(node.content) : node;\n    });\n  } // All constants that are allowed in rules\n\n\n  var SUPPORTED_CONSTANTS = {\n    true: true,\n    false: true,\n    e: true,\n    i: true,\n    Infinity: true,\n    LN2: true,\n    LN10: true,\n    LOG2E: true,\n    LOG10E: true,\n    NaN: true,\n    phi: true,\n    pi: true,\n    SQRT1_2: true,\n    SQRT2: true,\n    tau: true // null: false,\n    // undefined: false,\n    // version: false,\n\n  }; // Array of strings, used to build the ruleSet.\n  // Each l (left side) and r (right side) are parsed by\n  // the expression parser into a node tree.\n  // Left hand sides are matched to subtrees within the\n  // expression to be parsed and replaced with the right\n  // hand side.\n  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])\n  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.\n  // It is possible to get into an infinite loop with conflicting rules\n\n  simplify.rules = [simplifyCore, // { l: 'n+0', r: 'n' },     // simplifyCore\n  // { l: 'n^0', r: '1' },     // simplifyCore\n  // { l: '0*n', r: '0' },     // simplifyCore\n  // { l: 'n/n', r: '1'},      // simplifyCore\n  // { l: 'n^1', r: 'n' },     // simplifyCore\n  // { l: '+n1', r:'n1' },     // simplifyCore\n  // { l: 'n--n1', r:'n+n1' }, // simplifyCore\n  {\n    l: 'log(e)',\n    r: '1'\n  }, // temporary rules\n  // Note initially we tend constants to the right because like-term\n  // collection prefers the left, and we would rather collect nonconstants\n  {\n    s: 'n-n1 -> n+-n1',\n    // temporarily replace 'subtract' so we can further flatten the 'add' operator\n    assuming: {\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: 'n-n -> 0',\n    // partial alternative when we can't always subtract\n    assuming: {\n      subtract: {\n        total: false\n      }\n    }\n  }, {\n    s: '-(c*v) -> v * (-c)',\n    // make non-constant terms positive\n    assuming: {\n      multiply: {\n        commutative: true\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: '-(c*v) -> (-c) * v',\n    // non-commutative version, part 1\n    assuming: {\n      multiply: {\n        commutative: false\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: '-(v*c) -> v * (-c)',\n    // non-commutative version, part 2\n    assuming: {\n      multiply: {\n        commutative: false\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    l: '-(n1/n2)',\n    r: '-n1/n2'\n  }, {\n    l: '-v',\n    r: 'v * (-1)'\n  }, // finish making non-constant terms positive\n  {\n    l: '(n1 + n2)*(-1)',\n    r: 'n1*(-1) + n2*(-1)',\n    repeat: true\n  }, // expand negations to achieve as much sign cancellation as possible\n  {\n    l: 'n/n1^n2',\n    r: 'n*n1^-n2'\n  }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator\n  {\n    l: 'n/n1',\n    r: 'n*n1^-1'\n  }, {\n    s: '(n1*n2)^n3 -> n1^n3 * n2^n3',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    }\n  }, {\n    s: '(n1*n2)^(-1) -> n2^(-1) * n1^(-1)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // expand nested exponentiation\n  {\n    s: '(n ^ n1) ^ n2 -> n ^ (n1 * n2)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // 1/(1/n) = n needs 1/n to exist\n\n  }, // collect like factors; into a sum, only do this for nonconstants\n  {\n    l: ' v   * ( v   * n1 + n2)',\n    r: 'v^2       * n1 +  v   * n2'\n  }, {\n    s: ' v   * (v^n4 * n1 + n2)   ->  v^(1+n4)  * n1 +  v   * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // v*1/v = v^(1+-1) needs 1/v\n\n  }, {\n    s: 'v^n3 * ( v   * n1 + n2)   ->  v^(n3+1)  * n1 + v^n3 * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    }\n  }, {\n    s: 'v^n3 * (v^n4 * n1 + n2)   ->  v^(n3+n4) * n1 + v^n3 * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    }\n  }, {\n    l: 'n*n',\n    r: 'n^2'\n  }, {\n    s: 'n * n^n1 -> n^(n1+1)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // n*1/n = n^(-1+1) needs 1/n\n\n  }, {\n    s: 'n^n1 * n^n2 -> n^(n1+n2)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // ditto for n^2*1/n^2\n\n  }, // Unfortunately, to deal with more complicated cancellations, it\n  // becomes necessary to simplify constants twice per pass. It's not\n  // terribly expensive compared to matching rules, so this should not\n  // pose a performance problem.\n  simplifyConstant, // First: before collecting like terms\n  // collect like terms\n  {\n    s: 'n+n -> 2*n',\n    assuming: {\n      add: {\n        total: true\n      }\n    } // 2 = 1 + 1 needs to exist\n\n  }, {\n    l: 'n+-n',\n    r: '0'\n  }, {\n    l: 'v*n + v',\n    r: 'v*(n+1)'\n  }, // NOTE: leftmost position is special:\n  {\n    l: 'n3*n1 + n3*n2',\n    r: 'n3*(n1+n2)'\n  }, // All sub-monomials tried there.\n  {\n    l: 'n3^(-n4)*n1 +   n3  * n2',\n    r: 'n3^(-n4)*(n1 + n3^(n4+1) *n2)'\n  }, {\n    l: 'n3^(-n4)*n1 + n3^n5 * n2',\n    r: 'n3^(-n4)*(n1 + n3^(n4+n5)*n2)'\n  }, {\n    s: 'n*v + v -> (n+1)*v',\n    // noncommutative additional cases\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3 + n2*n3 -> (n1+n2)*n3',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3^(-n4) + n2 * n3    -> (n1 + n2*n3^(n4 +  1))*n3^(-n4)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3^(-n4) + n2 * n3^n5 -> (n1 + n2*n3^(n4 + n5))*n3^(-n4)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    l: 'n*c + c',\n    r: '(n+1)*c'\n  }, {\n    s: 'c*n + c -> c*(n+1)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, simplifyConstant, // Second: before returning expressions to \"standard form\"\n  // make factors positive (and undo 'make non-constant terms positive')\n  {\n    s: '(-n)*n1 -> -(n*n1)',\n    assuming: {\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: 'n1*(-n) -> -(n1*n)',\n    // in case * non-commutative\n    assuming: {\n      subtract: {\n        total: true\n      },\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // final ordering of constants\n  {\n    s: 'c+v -> v+c',\n    assuming: {\n      add: {\n        commutative: true\n      }\n    },\n    imposeContext: {\n      add: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'v*c -> c*v',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    },\n    imposeContext: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // undo temporary rules\n  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant\n  {\n    l: 'n+-n1',\n    r: 'n-n1'\n  }, // undo replace 'subtract'\n  {\n    s: 'n*(n1^-1) -> n/n1',\n    // undo replace 'divide'; for * commutative\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n\n  }, {\n    s: 'n*n1^-n2 -> n/n1^n2',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n\n  }, {\n    s: 'n^-1 -> 1/n',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n\n  }, {\n    l: 'n^1',\n    r: 'n'\n  }, // can be produced by power cancellation\n  {\n    s: 'n*(n1/n2) -> (n*n1)/n2',\n    // '*' before '/'\n    assuming: {\n      multiply: {\n        associative: true\n      }\n    }\n  }, {\n    s: 'n-(n1+n2) -> n-n1-n2',\n    // '-' before '+'\n    assuming: {\n      addition: {\n        associative: true,\n        commutative: true\n      }\n    }\n  }, // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },\n  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },\n  // simplifyConstant can leave an extra factor of 1, which can always\n  // be eliminated, since the identity always commutes\n  {\n    l: '1*n',\n    r: 'n',\n    imposeContext: {\n      multiply: {\n        commutative: true\n      }\n    }\n  }, {\n    s: 'n1/(n2/n3) -> (n1*n3)/n2',\n    assuming: {\n      multiply: {\n        associative: true\n      }\n    }\n  }, {\n    l: 'n1/(-n2)',\n    r: '-n1/n2'\n  }];\n  /**\n   * Takes any rule object as allowed by the specification in simplify\n   * and puts it in a standard form used by applyRule\n   */\n\n  function _canonicalizeRule(ruleObject, context) {\n    var newRule = {};\n\n    if (ruleObject.s) {\n      var lr = ruleObject.s.split('->');\n\n      if (lr.length === 2) {\n        newRule.l = lr[0];\n        newRule.r = lr[1];\n      } else {\n        throw SyntaxError('Could not parse rule: ' + ruleObject.s);\n      }\n    } else {\n      newRule.l = ruleObject.l;\n      newRule.r = ruleObject.r;\n    }\n\n    newRule.l = removeParens(parse(newRule.l));\n    newRule.r = removeParens(parse(newRule.r));\n\n    for (var prop of ['imposeContext', 'repeat', 'assuming']) {\n      if (prop in ruleObject) {\n        newRule[prop] = ruleObject[prop];\n      }\n    }\n\n    if (ruleObject.evaluate) {\n      newRule.evaluate = parse(ruleObject.evaluate);\n    }\n\n    if (isAssociative(newRule.l, context)) {\n      var makeNode = createMakeNodeFunction(newRule.l);\n\n      var expandsym = _getExpandPlaceholderSymbol();\n\n      newRule.expanded = {};\n      newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.\n      // This helps to match the newRule against nodes returned from getSplits() later on.\n\n      flatten(newRule.expanded.l, context);\n      unflattenr(newRule.expanded.l, context);\n      newRule.expanded.r = makeNode([newRule.r, expandsym]);\n    }\n\n    return newRule;\n  }\n  /**\n   * Parse the string array of rules into nodes\n   *\n   * Example syntax for rules:\n   *\n   * Position constants to the left in a product:\n   * { l: 'n1 * c1', r: 'c1 * n1' }\n   * n1 is any Node, and c1 is a ConstantNode.\n   *\n   * Apply difference of squares formula:\n   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }\n   * n1, n2 mean any Node.\n   *\n   * Short hand notation:\n   * 'n1 * c1 -> c1 * n1'\n   */\n\n\n  function _buildRules(rules, context) {\n    // Array of rules to be used to simplify expressions\n    var ruleSet = [];\n\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      var newRule = void 0;\n      var ruleType = typeof rule;\n\n      switch (ruleType) {\n        case 'string':\n          rule = {\n            s: rule\n          };\n\n        /* falls through */\n\n        case 'object':\n          newRule = _canonicalizeRule(rule, context);\n          break;\n\n        case 'function':\n          newRule = rule;\n          break;\n\n        default:\n          throw TypeError('Unsupported type of rule: ' + ruleType);\n      } // console.log('Adding rule: ' + rules[i])\n      // console.log(newRule)\n\n\n      ruleSet.push(newRule);\n    }\n\n    return ruleSet;\n  }\n\n  var _lastsym = 0;\n\n  function _getExpandPlaceholderSymbol() {\n    return new SymbolNode('_p' + _lastsym++);\n  }\n\n  function mapRule(nodes, rule, context) {\n    var resNodes = nodes;\n\n    if (nodes) {\n      for (var i = 0; i < nodes.length; ++i) {\n        var newNode = applyRule(nodes[i], rule, context);\n\n        if (newNode !== nodes[i]) {\n          if (resNodes === nodes) {\n            resNodes = nodes.slice();\n          }\n\n          resNodes[i] = newNode;\n        }\n      }\n    }\n\n    return resNodes;\n  }\n  /**\n   * Returns a simplfied form of node, or the original node if no simplification was possible.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {Object | Function} rule\n   * @param  {Object} context -- information about assumed properties of operators\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.\n   */\n\n\n  function applyRule(node, rule, context) {\n    //    console.log('Entering applyRule(\"', rule.l.toString({parenthesis:'all'}), '->', rule.r.toString({parenthesis:'all'}), '\",', node.toString({parenthesis:'all'}),')')\n    // check that the assumptions for this rule are satisfied by the current\n    // context:\n    if (rule.assuming) {\n      for (var symbol in rule.assuming) {\n        for (var property in rule.assuming[symbol]) {\n          if (hasProperty(symbol, property, context) !== rule.assuming[symbol][property]) {\n            return node;\n          }\n        }\n      }\n    }\n\n    var mergedContext = mergeContext(rule.imposeContext, context); // Do not clone node unless we find a match\n\n    var res = node; // First replace our child nodes with their simplified versions\n    // If a child could not be simplified, applying the rule to it\n    // will have no effect since the node is returned unchanged\n\n    if (res instanceof OperatorNode || res instanceof FunctionNode) {\n      var newArgs = mapRule(res.args, rule, context);\n\n      if (newArgs !== res.args) {\n        res = res.clone();\n        res.args = newArgs;\n      }\n    } else if (res instanceof ParenthesisNode) {\n      if (res.content) {\n        var newContent = applyRule(res.content, rule, context);\n\n        if (newContent !== res.content) {\n          res = new ParenthesisNode(newContent);\n        }\n      }\n    } else if (res instanceof ArrayNode) {\n      var newItems = mapRule(res.items, rule, context);\n\n      if (newItems !== res.items) {\n        res = new ArrayNode(newItems);\n      }\n    } else if (res instanceof AccessorNode) {\n      var newObj = res.object;\n\n      if (res.object) {\n        newObj = applyRule(res.object, rule, context);\n      }\n\n      var newIndex = res.index;\n\n      if (res.index) {\n        newIndex = applyRule(res.index, rule, context);\n      }\n\n      if (newObj !== res.object || newIndex !== res.index) {\n        res = new AccessorNode(newObj, newIndex);\n      }\n    } else if (res instanceof IndexNode) {\n      var newDims = mapRule(res.dimensions, rule, context);\n\n      if (newDims !== res.dimensions) {\n        res = new IndexNode(newDims);\n      }\n    } else if (res instanceof ObjectNode) {\n      var changed = false;\n      var newProps = {};\n\n      for (var prop in res.properties) {\n        newProps[prop] = applyRule(res.properties[prop], rule, context);\n\n        if (newProps[prop] !== res.properties[prop]) {\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        res = new ObjectNode(newProps);\n      }\n    } // Try to match a rule against this node\n\n\n    var repl = rule.r;\n\n    var matches = _ruleMatch(rule.l, res, mergedContext)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.\n    // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.\n\n\n    if (!matches && rule.expanded) {\n      repl = rule.expanded.r;\n      matches = _ruleMatch(rule.expanded.l, res, mergedContext)[0];\n    }\n\n    if (matches) {\n      // const before = res.toString({parenthesis: 'all'})\n      // Create a new node by cloning the rhs of the matched rule\n      // we keep any implicit multiplication state if relevant\n      var implicit = res.implicit;\n      res = repl.clone();\n\n      if (implicit && 'implicit' in repl) {\n        res.implicit = true;\n      } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes\n\n\n      res = res.transform(function (node) {\n        if (node.isSymbolNode && hasOwnProperty(matches.placeholders, node.name)) {\n          return matches.placeholders[node.name].clone();\n        } else {\n          return node;\n        }\n      }); // const after = res.toString({parenthesis: 'all'})\n      // console.log('Simplified ' + before + ' to ' + after)\n    }\n\n    if (rule.repeat && res !== node) {\n      res = applyRule(res, rule, context);\n    }\n\n    return res;\n  }\n  /**\n   * Get (binary) combinations of a flattened binary node\n   * e.g. +(node1, node2, node3) -> [\n   *        +(node1,  +(node2, node3)),\n   *        +(node2,  +(node1, node3)),\n   *        +(node3,  +(node1, node2))]\n   *\n   */\n\n\n  function getSplits(node, context) {\n    var res = [];\n    var right, rightArgs;\n    var makeNode = createMakeNodeFunction(node);\n\n    if (isCommutative(node, context)) {\n      for (var i = 0; i < node.args.length; i++) {\n        rightArgs = node.args.slice(0);\n        rightArgs.splice(i, 1);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([node.args[i], right]));\n      }\n    } else {\n      // Keep order, but try all parenthesizations\n      for (var _i = 1; _i < node.args.length; _i++) {\n        var left = node.args[0];\n\n        if (_i > 1) {\n          left = makeNode(node.args.slice(0, _i));\n        }\n\n        rightArgs = node.args.slice(_i);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([left, right]));\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Returns the set union of two match-placeholders or null if there is a conflict.\n   */\n\n\n  function mergeMatch(match1, match2) {\n    var res = {\n      placeholders: {}\n    }; // Some matches may not have placeholders; this is OK\n\n    if (!match1.placeholders && !match2.placeholders) {\n      return res;\n    } else if (!match1.placeholders) {\n      return match2;\n    } else if (!match2.placeholders) {\n      return match1;\n    } // Placeholders with the same key must match exactly\n\n\n    for (var key in match1.placeholders) {\n      if (hasOwnProperty(match1.placeholders, key)) {\n        res.placeholders[key] = match1.placeholders[key];\n\n        if (hasOwnProperty(match2.placeholders, key)) {\n          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {\n            return null;\n          }\n        }\n      }\n    }\n\n    for (var _key in match2.placeholders) {\n      if (hasOwnProperty(match2.placeholders, _key)) {\n        res.placeholders[_key] = match2.placeholders[_key];\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   */\n\n\n  function combineChildMatches(list1, list2) {\n    var res = [];\n\n    if (list1.length === 0 || list2.length === 0) {\n      return res;\n    }\n\n    var merged;\n\n    for (var i1 = 0; i1 < list1.length; i1++) {\n      for (var i2 = 0; i2 < list2.length; i2++) {\n        merged = mergeMatch(list1[i1], list2[i2]);\n\n        if (merged) {\n          res.push(merged);\n        }\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   * Returns a list of unique matches.\n   */\n\n\n  function mergeChildMatches(childMatches) {\n    if (childMatches.length === 0) {\n      return childMatches;\n    }\n\n    var sets = childMatches.reduce(combineChildMatches);\n    var uniqueSets = [];\n    var unique = {};\n\n    for (var i = 0; i < sets.length; i++) {\n      var s = JSON.stringify(sets[i]);\n\n      if (!unique[s]) {\n        unique[s] = true;\n        uniqueSets.push(sets[i]);\n      }\n    }\n\n    return uniqueSets;\n  }\n  /**\n   * Determines whether node matches rule.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param {Object} context -- provides assumed properties of operators\n   * @param {Boolean} isSplit -- whether we are in process of splitting an\n   *                    n-ary operator node into possible binary combinations.\n   *                    Defaults to false.\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _ruleMatch(rule, node, context, isSplit) {\n    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')\n    //    console.log('rule = ' + rule)\n    //    console.log('node = ' + node)\n    //    console.log('Entering _ruleMatch(', rule.toString({parenthesis:'all'}), ', ', node.toString({parenthesis:'all'}), ', ', context, ')')\n    var res = [{\n      placeholders: {}\n    }];\n\n    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {\n      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly\n      if (rule instanceof OperatorNode) {\n        if (rule.op !== node.op || rule.fn !== node.fn) {\n          return [];\n        }\n      } else if (rule instanceof FunctionNode) {\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } // rule and node match. Search the children of rule and node.\n\n\n      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node, context) && node.args.length === rule.args.length || isSplit) {\n        // Expect non-associative operators to match exactly,\n        // except in any order if operator is commutative\n        var childMatches = [];\n\n        for (var i = 0; i < rule.args.length; i++) {\n          var childMatch = _ruleMatch(rule.args[i], node.args[i], context);\n\n          if (childMatch.length === 0) {\n            // Child did not match, so stop searching immediately\n            break;\n          } // The child matched, so add the information returned from the child to our result\n\n\n          childMatches.push(childMatch);\n        }\n\n        if (childMatches.length !== rule.args.length) {\n          if (!isCommutative(node, context) || // exact match in order needed\n          rule.args.length === 1) {\n            // nothing to commute\n            return [];\n          }\n\n          if (rule.args.length > 2) {\n            /* Need to generate all permutations and try them.\n             * It's a bit complicated, and unlikely to come up since there\n             * are very few ternary or higher operators. So punt for now.\n             */\n            throw new Error('permuting >2 commutative non-associative rule arguments not yet implemented');\n          }\n          /* Exactly two arguments, try them reversed */\n\n\n          var leftMatch = _ruleMatch(rule.args[0], node.args[1], context);\n\n          if (leftMatch.length === 0) {\n            return [];\n          }\n\n          var rightMatch = _ruleMatch(rule.args[1], node.args[0], context);\n\n          if (rightMatch.length === 0) {\n            return [];\n          }\n\n          childMatches = [leftMatch, rightMatch];\n        }\n\n        res = mergeChildMatches(childMatches);\n      } else if (node.args.length >= 2 && rule.args.length === 2) {\n        // node is flattened, rule is not\n        // Associative operators/functions can be split in different ways so we check if the rule matches each\n        // them and return their union.\n        var splits = getSplits(node, context);\n        var splitMatches = [];\n\n        for (var _i2 = 0; _i2 < splits.length; _i2++) {\n          var matchSet = _ruleMatch(rule, splits[_i2], context, true); // recursing at the same tree depth here\n\n\n          splitMatches = splitMatches.concat(matchSet);\n        }\n\n        return splitMatches;\n      } else if (rule.args.length > 2) {\n        throw Error('Unexpected non-binary associative function: ' + rule.toString());\n      } else {\n        // Incorrect number of arguments in rule and node, so no match\n        return [];\n      }\n    } else if (rule instanceof SymbolNode) {\n      // If the rule is a SymbolNode, then it carries a special meaning\n      // according to the first character of the symbol node name.\n      // c.* matches a ConstantNode\n      // n.* matches any node\n      if (rule.name.length === 0) {\n        throw new Error('Symbol in rule has 0 length...!?');\n      }\n\n      if (SUPPORTED_CONSTANTS[rule.name]) {\n        // built-in constant must match exactly\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {\n        // rule matches _anything_, so assign this node to the rule.name placeholder\n        // Assign node to the rule.name placeholder.\n        // Our parent will check for matches among placeholders.\n        res[0].placeholders[rule.name] = node;\n      } else if (rule.name[0] === 'v') {\n        // rule matches any variable thing (not a ConstantNode)\n        if (!isConstantNode(node)) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting something other than a ConstantNode\n          return [];\n        }\n      } else if (rule.name[0] === 'c') {\n        // rule matches any ConstantNode\n        if (node instanceof ConstantNode) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting a ConstantNode\n          return [];\n        }\n      } else {\n        throw new Error('Invalid symbol in rule: ' + rule.name);\n      }\n    } else if (rule instanceof ConstantNode) {\n      // Literal constant must match exactly\n      if (!equal(rule.value, node.value)) {\n        return [];\n      }\n    } else {\n      // Some other node was encountered which we aren't prepared for, so no match\n      return [];\n    } // It's a match!\n    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')\n\n\n    return res;\n  }\n  /**\n   * Determines whether p and q (and all their children nodes) are identical.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _exactMatch(p, q) {\n    if (p instanceof ConstantNode && q instanceof ConstantNode) {\n      if (!equal(p.value, q.value)) {\n        return false;\n      }\n    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {\n      if (p.name !== q.name) {\n        return false;\n      }\n    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {\n      if (p instanceof OperatorNode) {\n        if (p.op !== q.op || p.fn !== q.fn) {\n          return false;\n        }\n      } else if (p instanceof FunctionNode) {\n        if (p.name !== q.name) {\n          return false;\n        }\n      }\n\n      if (p.args.length !== q.args.length) {\n        return false;\n      }\n\n      for (var i = 0; i < p.args.length; i++) {\n        if (!_exactMatch(p.args[i], q.args[i])) {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  return simplify;\n});","map":{"version":3,"sources":["F:/Task-2/Frontend/node_modules/mathjs/lib/esm/function/algebra/simplify.js"],"names":["isConstantNode","isParenthesisNode","factory","createUtil","createSimplifyConstant","hasOwnProperty","createEmptyMap","createMap","name","dependencies","createSimplify","_ref","config","typed","parse","add","subtract","multiply","divide","pow","isZero","equal","resolve","simplifyCore","fraction","bignumber","mathWithTransform","matrix","AccessorNode","ArrayNode","ConstantNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","ParenthesisNode","SymbolNode","simplifyConstant","hasProperty","isCommutative","isAssociative","mergeContext","flatten","unflattenr","unflattenl","createMakeNodeFunction","defaultContext","realContext","positiveContext","simplify","string","expr","rules","stringMapObject","scope","stringMapObjectObject","options","stringArray","stringArrayMapObject","stringArrayMapObjectObject","NodeMapObject","NodeMapObjectObject","Node","NodeArray","NodeArrayMapObject","NodeArrayObjectObject","debug","consoleDebug","_buildRules","context","res","removeParens","visited","str","toString","parenthesis","_lastsym","laststr","console","log","i","length","rulestr","applyRule","concat","l","r","newstr","node","transform","path","parent","content","SUPPORTED_CONSTANTS","true","false","e","Infinity","LN2","LN10","LOG2E","LOG10E","NaN","phi","pi","SQRT1_2","SQRT2","tau","s","assuming","total","commutative","repeat","imposeContext","associative","addition","_canonicalizeRule","ruleObject","newRule","lr","split","SyntaxError","prop","evaluate","makeNode","expandsym","_getExpandPlaceholderSymbol","expanded","clone","ruleSet","rule","ruleType","TypeError","push","mapRule","nodes","resNodes","newNode","slice","symbol","property","mergedContext","newArgs","args","newContent","newItems","items","newObj","object","newIndex","index","newDims","dimensions","changed","newProps","properties","repl","matches","_ruleMatch","implicit","isSymbolNode","placeholders","getSplits","right","rightArgs","splice","_i","left","mergeMatch","match1","match2","key","_exactMatch","_key","combineChildMatches","list1","list2","merged","i1","i2","mergeChildMatches","childMatches","sets","reduce","uniqueSets","unique","JSON","stringify","isSplit","op","fn","childMatch","Error","leftMatch","rightMatch","splits","splitMatches","_i2","matchSet","substring","value","p","q"],"mappings":"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","sourcesContent":["import { isConstantNode, isParenthesisNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { createUtil } from './simplify/util.js';\nimport { createSimplifyConstant } from './simplify/simplifyConstant.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { createEmptyMap, createMap } from '../../utils/map.js';\nvar name = 'simplify';\nvar dependencies = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', 'resolve', 'simplifyCore', '?fraction', '?bignumber', 'mathWithTransform', 'matrix', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createSimplify = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    parse,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    isZero,\n    equal,\n    resolve,\n    simplifyCore,\n    fraction,\n    bignumber,\n    mathWithTransform,\n    matrix,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  var simplifyConstant = createSimplifyConstant({\n    typed,\n    config,\n    mathWithTransform,\n    matrix,\n    fraction,\n    bignumber,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    SymbolNode\n  });\n  var {\n    hasProperty,\n    isCommutative,\n    isAssociative,\n    mergeContext,\n    flatten,\n    unflattenr,\n    unflattenl,\n    createMakeNodeFunction,\n    defaultContext,\n    realContext,\n    positiveContext\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n  /**\n   * Simplify an expression tree.\n   *\n   * A list of rules are applied to an expression, repeating over the list until\n   * no further changes are made.\n   * It's possible to pass a custom set of rules to the function as second\n   * argument. A rule can be specified as an object, string, or function:\n   *\n   *     const rules = [\n   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\n   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',\n   *       function (node) {\n   *         // ... return a new node or return the node unchanged\n   *         return node\n   *       }\n   *     ]\n   *\n   * String and object rules consist of a left and right pattern. The left is\n   * used to match against the expression and the right determines what matches\n   * are replaced with. The main difference between a pattern and a normal\n   * expression is that variables starting with the following characters are\n   * interpreted as wildcards:\n   *\n   * - 'n' - matches any Node\n   * - 'c' - matches any ConstantNode\n   * - 'v' - matches any Node that is not a ConstantNode\n   *\n   * The default list of rules is exposed on the function as `simplify.rules`\n   * and can be used as a basis to built a set of custom rules.\n   *\n   * To specify a rule as a string, separate the left and right pattern by '->'\n   * When specifying a rule as an object, the following keys are meaningful:\n   * - l - the left pattern\n   * - r - the right pattern\n   * - s - in lieu of l and r, the string form that is broken at -> to give them\n   * - repeat - whether to repeat this rule until the expression stabilizes\n   * - assuming - gives a context object, as in the 'context' option to\n   *     simplify. Every property in the context object must match the current\n   *     context in order, or else the rule will not be applied.\n   * - imposeContext - gives a context object, as in the 'context' option to\n   *     simplify. Any settings specified will override the incoming context\n   *     for all matches of this rule.\n   *\n   * For more details on the theory, see:\n   *\n   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)\n   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)\n   *\n   *  An optional `options` argument can be passed as last argument of `simplify`.\n   *  Currently available options (defaults in parentheses):\n   *  - `consoleDebug` (false): whether to write the expression being simplified\n   *    and any changes to it, along with the rule responsible, to console\n   *  - `context` (simplify.defaultContext): an object giving properties of\n   *    each operator, which determine what simplifications are allowed. The\n   *    currently meaningful properties are commutative, associative,\n   *    total (whether the operation is defined for all arguments), and\n   *    trivial (whether the operation applied to a single argument leaves\n   *    that argument unchanged). The default context is very permissive and\n   *    allows almost all simplifications. Only properties differing from\n   *    the default need to be specified; the default context is used as a\n   *    fallback. Additional contexts `simplify.realContext` and\n   *    `simplify.positiveContext` are supplied to cause simplify to perform\n   *    just simplifications guaranteed to preserve all values of the expression\n   *    assuming all variables and subexpressions are real numbers or\n   *    positive real numbers, respectively. (Note that these are in some cases\n   *    more restrictive than the default context; for example, the default\n   *    context will allow `x/x` to simplify to 1, whereas\n   *    `simplify.realContext` will not, as `0/0` is not equal to 1.)\n   *  - `exactFractions` (true): whether to try to convert all constants to\n   *    exact rational numbers.\n   *  - `fractionsLimit` (10000): when `exactFractions` is true, constants will\n   *    be expressed as fractions only when both numerator and denominator\n   *    are smaller than `fractionsLimit`.\n   *\n   * Syntax:\n   *\n   *     simplify(expr)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules, scope)\n   *     simplify(expr, rules, scope, options)\n   *     simplify(expr, scope)\n   *     simplify(expr, scope, options)\n   *\n   * Examples:\n   *\n   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node \"2 * x\"\n   *     math.simplify('2 * 3 * x', {x: 4})        // Node \"24\"\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\n   *     math.simplify(f)                          // Node \"2 * x\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node \"x * 2 / 5\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node \"0.4 * x\"\n   *\n   * See also:\n   *\n   *     simplifyCore, derivative, evaluate, parse, rationalize, resolve\n   *\n   * @param {Node | string} expr\n   *            The expression to be simplified\n   * @param {Array<{l:string, r: string} | string | function>} [rules]\n   *            Optional list with custom rules\n   * @return {Node} Returns the simplified form of `expr`\n   */\n\n  var simplify = typed('simplify', {\n    string: function string(expr) {\n      return this(parse(expr), this.rules, createEmptyMap(), {});\n    },\n    'string, Map | Object': function stringMapObject(expr, scope) {\n      return this(parse(expr), this.rules, scope, {});\n    },\n    'string, Map | Object, Object': function stringMapObjectObject(expr, scope, options) {\n      return this(parse(expr), this.rules, scope, options);\n    },\n    'string, Array': function stringArray(expr, rules) {\n      return this(parse(expr), rules, createEmptyMap(), {});\n    },\n    'string, Array, Map | Object': function stringArrayMapObject(expr, rules, scope) {\n      return this(parse(expr), rules, scope, {});\n    },\n    'string, Array, Map | Object, Object': function stringArrayMapObjectObject(expr, rules, scope, options) {\n      return this(parse(expr), rules, scope, options);\n    },\n    'Node, Map | Object': function NodeMapObject(expr, scope) {\n      return this(expr, this.rules, scope, {});\n    },\n    'Node, Map | Object, Object': function NodeMapObjectObject(expr, scope, options) {\n      return this(expr, this.rules, scope, options);\n    },\n    Node: function Node(expr) {\n      return this(expr, this.rules, createEmptyMap(), {});\n    },\n    'Node, Array': function NodeArray(expr, rules) {\n      return this(expr, rules, createEmptyMap(), {});\n    },\n    'Node, Array, Map | Object': function NodeArrayMapObject(expr, rules, scope) {\n      return this(expr, rules, scope, {});\n    },\n    'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {\n      return this(expr, rules, createMap(scope), options);\n    },\n    'Node, Array, Map, Object': function NodeArrayMapObject(expr, rules, scope, options) {\n      var debug = options.consoleDebug;\n      rules = _buildRules(rules, options.context);\n      var res = resolve(expr, scope);\n      res = removeParens(res);\n      var visited = {};\n      var str = res.toString({\n        parenthesis: 'all'\n      });\n\n      while (!visited[str]) {\n        visited[str] = true;\n        _lastsym = 0; // counter for placeholder symbols\n\n        var laststr = str;\n        if (debug) console.log('Working on: ', str);\n\n        for (var i = 0; i < rules.length; i++) {\n          var rulestr = '';\n\n          if (typeof rules[i] === 'function') {\n            res = rules[i](res, options);\n            if (debug) rulestr = rules[i].name;\n          } else {\n            flatten(res, options.context);\n            res = applyRule(res, rules[i], options.context);\n\n            if (debug) {\n              rulestr = \"\".concat(rules[i].l.toString(), \" -> \").concat(rules[i].r.toString());\n            }\n          }\n\n          if (debug) {\n            var newstr = res.toString({\n              parenthesis: 'all'\n            });\n\n            if (newstr !== laststr) {\n              console.log('Applying', rulestr, 'produced', newstr);\n              laststr = newstr;\n            }\n          }\n          /* Use left-heavy binary tree internally,\n           * since custom rule functions may expect it\n           */\n\n\n          unflattenl(res, options.context);\n        }\n\n        str = res.toString({\n          parenthesis: 'all'\n        });\n      }\n\n      return res;\n    }\n  });\n  simplify.defaultContext = defaultContext;\n  simplify.realContext = realContext;\n  simplify.positiveContext = positiveContext;\n\n  function removeParens(node) {\n    return node.transform(function (node, path, parent) {\n      return isParenthesisNode(node) ? removeParens(node.content) : node;\n    });\n  } // All constants that are allowed in rules\n\n\n  var SUPPORTED_CONSTANTS = {\n    true: true,\n    false: true,\n    e: true,\n    i: true,\n    Infinity: true,\n    LN2: true,\n    LN10: true,\n    LOG2E: true,\n    LOG10E: true,\n    NaN: true,\n    phi: true,\n    pi: true,\n    SQRT1_2: true,\n    SQRT2: true,\n    tau: true // null: false,\n    // undefined: false,\n    // version: false,\n\n  }; // Array of strings, used to build the ruleSet.\n  // Each l (left side) and r (right side) are parsed by\n  // the expression parser into a node tree.\n  // Left hand sides are matched to subtrees within the\n  // expression to be parsed and replaced with the right\n  // hand side.\n  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])\n  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.\n  // It is possible to get into an infinite loop with conflicting rules\n\n  simplify.rules = [simplifyCore, // { l: 'n+0', r: 'n' },     // simplifyCore\n  // { l: 'n^0', r: '1' },     // simplifyCore\n  // { l: '0*n', r: '0' },     // simplifyCore\n  // { l: 'n/n', r: '1'},      // simplifyCore\n  // { l: 'n^1', r: 'n' },     // simplifyCore\n  // { l: '+n1', r:'n1' },     // simplifyCore\n  // { l: 'n--n1', r:'n+n1' }, // simplifyCore\n  {\n    l: 'log(e)',\n    r: '1'\n  }, // temporary rules\n  // Note initially we tend constants to the right because like-term\n  // collection prefers the left, and we would rather collect nonconstants\n  {\n    s: 'n-n1 -> n+-n1',\n    // temporarily replace 'subtract' so we can further flatten the 'add' operator\n    assuming: {\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: 'n-n -> 0',\n    // partial alternative when we can't always subtract\n    assuming: {\n      subtract: {\n        total: false\n      }\n    }\n  }, {\n    s: '-(c*v) -> v * (-c)',\n    // make non-constant terms positive\n    assuming: {\n      multiply: {\n        commutative: true\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: '-(c*v) -> (-c) * v',\n    // non-commutative version, part 1\n    assuming: {\n      multiply: {\n        commutative: false\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: '-(v*c) -> v * (-c)',\n    // non-commutative version, part 2\n    assuming: {\n      multiply: {\n        commutative: false\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    l: '-(n1/n2)',\n    r: '-n1/n2'\n  }, {\n    l: '-v',\n    r: 'v * (-1)'\n  }, // finish making non-constant terms positive\n  {\n    l: '(n1 + n2)*(-1)',\n    r: 'n1*(-1) + n2*(-1)',\n    repeat: true\n  }, // expand negations to achieve as much sign cancellation as possible\n  {\n    l: 'n/n1^n2',\n    r: 'n*n1^-n2'\n  }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator\n  {\n    l: 'n/n1',\n    r: 'n*n1^-1'\n  }, {\n    s: '(n1*n2)^n3 -> n1^n3 * n2^n3',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    }\n  }, {\n    s: '(n1*n2)^(-1) -> n2^(-1) * n1^(-1)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // expand nested exponentiation\n  {\n    s: '(n ^ n1) ^ n2 -> n ^ (n1 * n2)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // 1/(1/n) = n needs 1/n to exist\n\n  }, // collect like factors; into a sum, only do this for nonconstants\n  {\n    l: ' v   * ( v   * n1 + n2)',\n    r: 'v^2       * n1 +  v   * n2'\n  }, {\n    s: ' v   * (v^n4 * n1 + n2)   ->  v^(1+n4)  * n1 +  v   * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // v*1/v = v^(1+-1) needs 1/v\n\n  }, {\n    s: 'v^n3 * ( v   * n1 + n2)   ->  v^(n3+1)  * n1 + v^n3 * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    }\n  }, {\n    s: 'v^n3 * (v^n4 * n1 + n2)   ->  v^(n3+n4) * n1 + v^n3 * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    }\n  }, {\n    l: 'n*n',\n    r: 'n^2'\n  }, {\n    s: 'n * n^n1 -> n^(n1+1)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // n*1/n = n^(-1+1) needs 1/n\n\n  }, {\n    s: 'n^n1 * n^n2 -> n^(n1+n2)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // ditto for n^2*1/n^2\n\n  }, // Unfortunately, to deal with more complicated cancellations, it\n  // becomes necessary to simplify constants twice per pass. It's not\n  // terribly expensive compared to matching rules, so this should not\n  // pose a performance problem.\n  simplifyConstant, // First: before collecting like terms\n  // collect like terms\n  {\n    s: 'n+n -> 2*n',\n    assuming: {\n      add: {\n        total: true\n      }\n    } // 2 = 1 + 1 needs to exist\n\n  }, {\n    l: 'n+-n',\n    r: '0'\n  }, {\n    l: 'v*n + v',\n    r: 'v*(n+1)'\n  }, // NOTE: leftmost position is special:\n  {\n    l: 'n3*n1 + n3*n2',\n    r: 'n3*(n1+n2)'\n  }, // All sub-monomials tried there.\n  {\n    l: 'n3^(-n4)*n1 +   n3  * n2',\n    r: 'n3^(-n4)*(n1 + n3^(n4+1) *n2)'\n  }, {\n    l: 'n3^(-n4)*n1 + n3^n5 * n2',\n    r: 'n3^(-n4)*(n1 + n3^(n4+n5)*n2)'\n  }, {\n    s: 'n*v + v -> (n+1)*v',\n    // noncommutative additional cases\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3 + n2*n3 -> (n1+n2)*n3',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3^(-n4) + n2 * n3    -> (n1 + n2*n3^(n4 +  1))*n3^(-n4)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3^(-n4) + n2 * n3^n5 -> (n1 + n2*n3^(n4 + n5))*n3^(-n4)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    l: 'n*c + c',\n    r: '(n+1)*c'\n  }, {\n    s: 'c*n + c -> c*(n+1)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, simplifyConstant, // Second: before returning expressions to \"standard form\"\n  // make factors positive (and undo 'make non-constant terms positive')\n  {\n    s: '(-n)*n1 -> -(n*n1)',\n    assuming: {\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: 'n1*(-n) -> -(n1*n)',\n    // in case * non-commutative\n    assuming: {\n      subtract: {\n        total: true\n      },\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // final ordering of constants\n  {\n    s: 'c+v -> v+c',\n    assuming: {\n      add: {\n        commutative: true\n      }\n    },\n    imposeContext: {\n      add: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'v*c -> c*v',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    },\n    imposeContext: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // undo temporary rules\n  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant\n  {\n    l: 'n+-n1',\n    r: 'n-n1'\n  }, // undo replace 'subtract'\n  {\n    s: 'n*(n1^-1) -> n/n1',\n    // undo replace 'divide'; for * commutative\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n\n  }, {\n    s: 'n*n1^-n2 -> n/n1^n2',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n\n  }, {\n    s: 'n^-1 -> 1/n',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n\n  }, {\n    l: 'n^1',\n    r: 'n'\n  }, // can be produced by power cancellation\n  {\n    s: 'n*(n1/n2) -> (n*n1)/n2',\n    // '*' before '/'\n    assuming: {\n      multiply: {\n        associative: true\n      }\n    }\n  }, {\n    s: 'n-(n1+n2) -> n-n1-n2',\n    // '-' before '+'\n    assuming: {\n      addition: {\n        associative: true,\n        commutative: true\n      }\n    }\n  }, // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },\n  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },\n  // simplifyConstant can leave an extra factor of 1, which can always\n  // be eliminated, since the identity always commutes\n  {\n    l: '1*n',\n    r: 'n',\n    imposeContext: {\n      multiply: {\n        commutative: true\n      }\n    }\n  }, {\n    s: 'n1/(n2/n3) -> (n1*n3)/n2',\n    assuming: {\n      multiply: {\n        associative: true\n      }\n    }\n  }, {\n    l: 'n1/(-n2)',\n    r: '-n1/n2'\n  }];\n  /**\n   * Takes any rule object as allowed by the specification in simplify\n   * and puts it in a standard form used by applyRule\n   */\n\n  function _canonicalizeRule(ruleObject, context) {\n    var newRule = {};\n\n    if (ruleObject.s) {\n      var lr = ruleObject.s.split('->');\n\n      if (lr.length === 2) {\n        newRule.l = lr[0];\n        newRule.r = lr[1];\n      } else {\n        throw SyntaxError('Could not parse rule: ' + ruleObject.s);\n      }\n    } else {\n      newRule.l = ruleObject.l;\n      newRule.r = ruleObject.r;\n    }\n\n    newRule.l = removeParens(parse(newRule.l));\n    newRule.r = removeParens(parse(newRule.r));\n\n    for (var prop of ['imposeContext', 'repeat', 'assuming']) {\n      if (prop in ruleObject) {\n        newRule[prop] = ruleObject[prop];\n      }\n    }\n\n    if (ruleObject.evaluate) {\n      newRule.evaluate = parse(ruleObject.evaluate);\n    }\n\n    if (isAssociative(newRule.l, context)) {\n      var makeNode = createMakeNodeFunction(newRule.l);\n\n      var expandsym = _getExpandPlaceholderSymbol();\n\n      newRule.expanded = {};\n      newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.\n      // This helps to match the newRule against nodes returned from getSplits() later on.\n\n      flatten(newRule.expanded.l, context);\n      unflattenr(newRule.expanded.l, context);\n      newRule.expanded.r = makeNode([newRule.r, expandsym]);\n    }\n\n    return newRule;\n  }\n  /**\n   * Parse the string array of rules into nodes\n   *\n   * Example syntax for rules:\n   *\n   * Position constants to the left in a product:\n   * { l: 'n1 * c1', r: 'c1 * n1' }\n   * n1 is any Node, and c1 is a ConstantNode.\n   *\n   * Apply difference of squares formula:\n   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }\n   * n1, n2 mean any Node.\n   *\n   * Short hand notation:\n   * 'n1 * c1 -> c1 * n1'\n   */\n\n\n  function _buildRules(rules, context) {\n    // Array of rules to be used to simplify expressions\n    var ruleSet = [];\n\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      var newRule = void 0;\n      var ruleType = typeof rule;\n\n      switch (ruleType) {\n        case 'string':\n          rule = {\n            s: rule\n          };\n\n        /* falls through */\n\n        case 'object':\n          newRule = _canonicalizeRule(rule, context);\n          break;\n\n        case 'function':\n          newRule = rule;\n          break;\n\n        default:\n          throw TypeError('Unsupported type of rule: ' + ruleType);\n      } // console.log('Adding rule: ' + rules[i])\n      // console.log(newRule)\n\n\n      ruleSet.push(newRule);\n    }\n\n    return ruleSet;\n  }\n\n  var _lastsym = 0;\n\n  function _getExpandPlaceholderSymbol() {\n    return new SymbolNode('_p' + _lastsym++);\n  }\n\n  function mapRule(nodes, rule, context) {\n    var resNodes = nodes;\n\n    if (nodes) {\n      for (var i = 0; i < nodes.length; ++i) {\n        var newNode = applyRule(nodes[i], rule, context);\n\n        if (newNode !== nodes[i]) {\n          if (resNodes === nodes) {\n            resNodes = nodes.slice();\n          }\n\n          resNodes[i] = newNode;\n        }\n      }\n    }\n\n    return resNodes;\n  }\n  /**\n   * Returns a simplfied form of node, or the original node if no simplification was possible.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {Object | Function} rule\n   * @param  {Object} context -- information about assumed properties of operators\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.\n   */\n\n\n  function applyRule(node, rule, context) {\n    //    console.log('Entering applyRule(\"', rule.l.toString({parenthesis:'all'}), '->', rule.r.toString({parenthesis:'all'}), '\",', node.toString({parenthesis:'all'}),')')\n    // check that the assumptions for this rule are satisfied by the current\n    // context:\n    if (rule.assuming) {\n      for (var symbol in rule.assuming) {\n        for (var property in rule.assuming[symbol]) {\n          if (hasProperty(symbol, property, context) !== rule.assuming[symbol][property]) {\n            return node;\n          }\n        }\n      }\n    }\n\n    var mergedContext = mergeContext(rule.imposeContext, context); // Do not clone node unless we find a match\n\n    var res = node; // First replace our child nodes with their simplified versions\n    // If a child could not be simplified, applying the rule to it\n    // will have no effect since the node is returned unchanged\n\n    if (res instanceof OperatorNode || res instanceof FunctionNode) {\n      var newArgs = mapRule(res.args, rule, context);\n\n      if (newArgs !== res.args) {\n        res = res.clone();\n        res.args = newArgs;\n      }\n    } else if (res instanceof ParenthesisNode) {\n      if (res.content) {\n        var newContent = applyRule(res.content, rule, context);\n\n        if (newContent !== res.content) {\n          res = new ParenthesisNode(newContent);\n        }\n      }\n    } else if (res instanceof ArrayNode) {\n      var newItems = mapRule(res.items, rule, context);\n\n      if (newItems !== res.items) {\n        res = new ArrayNode(newItems);\n      }\n    } else if (res instanceof AccessorNode) {\n      var newObj = res.object;\n\n      if (res.object) {\n        newObj = applyRule(res.object, rule, context);\n      }\n\n      var newIndex = res.index;\n\n      if (res.index) {\n        newIndex = applyRule(res.index, rule, context);\n      }\n\n      if (newObj !== res.object || newIndex !== res.index) {\n        res = new AccessorNode(newObj, newIndex);\n      }\n    } else if (res instanceof IndexNode) {\n      var newDims = mapRule(res.dimensions, rule, context);\n\n      if (newDims !== res.dimensions) {\n        res = new IndexNode(newDims);\n      }\n    } else if (res instanceof ObjectNode) {\n      var changed = false;\n      var newProps = {};\n\n      for (var prop in res.properties) {\n        newProps[prop] = applyRule(res.properties[prop], rule, context);\n\n        if (newProps[prop] !== res.properties[prop]) {\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        res = new ObjectNode(newProps);\n      }\n    } // Try to match a rule against this node\n\n\n    var repl = rule.r;\n\n    var matches = _ruleMatch(rule.l, res, mergedContext)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.\n    // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.\n\n\n    if (!matches && rule.expanded) {\n      repl = rule.expanded.r;\n      matches = _ruleMatch(rule.expanded.l, res, mergedContext)[0];\n    }\n\n    if (matches) {\n      // const before = res.toString({parenthesis: 'all'})\n      // Create a new node by cloning the rhs of the matched rule\n      // we keep any implicit multiplication state if relevant\n      var implicit = res.implicit;\n      res = repl.clone();\n\n      if (implicit && 'implicit' in repl) {\n        res.implicit = true;\n      } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes\n\n\n      res = res.transform(function (node) {\n        if (node.isSymbolNode && hasOwnProperty(matches.placeholders, node.name)) {\n          return matches.placeholders[node.name].clone();\n        } else {\n          return node;\n        }\n      }); // const after = res.toString({parenthesis: 'all'})\n      // console.log('Simplified ' + before + ' to ' + after)\n    }\n\n    if (rule.repeat && res !== node) {\n      res = applyRule(res, rule, context);\n    }\n\n    return res;\n  }\n  /**\n   * Get (binary) combinations of a flattened binary node\n   * e.g. +(node1, node2, node3) -> [\n   *        +(node1,  +(node2, node3)),\n   *        +(node2,  +(node1, node3)),\n   *        +(node3,  +(node1, node2))]\n   *\n   */\n\n\n  function getSplits(node, context) {\n    var res = [];\n    var right, rightArgs;\n    var makeNode = createMakeNodeFunction(node);\n\n    if (isCommutative(node, context)) {\n      for (var i = 0; i < node.args.length; i++) {\n        rightArgs = node.args.slice(0);\n        rightArgs.splice(i, 1);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([node.args[i], right]));\n      }\n    } else {\n      // Keep order, but try all parenthesizations\n      for (var _i = 1; _i < node.args.length; _i++) {\n        var left = node.args[0];\n\n        if (_i > 1) {\n          left = makeNode(node.args.slice(0, _i));\n        }\n\n        rightArgs = node.args.slice(_i);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([left, right]));\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Returns the set union of two match-placeholders or null if there is a conflict.\n   */\n\n\n  function mergeMatch(match1, match2) {\n    var res = {\n      placeholders: {}\n    }; // Some matches may not have placeholders; this is OK\n\n    if (!match1.placeholders && !match2.placeholders) {\n      return res;\n    } else if (!match1.placeholders) {\n      return match2;\n    } else if (!match2.placeholders) {\n      return match1;\n    } // Placeholders with the same key must match exactly\n\n\n    for (var key in match1.placeholders) {\n      if (hasOwnProperty(match1.placeholders, key)) {\n        res.placeholders[key] = match1.placeholders[key];\n\n        if (hasOwnProperty(match2.placeholders, key)) {\n          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {\n            return null;\n          }\n        }\n      }\n    }\n\n    for (var _key in match2.placeholders) {\n      if (hasOwnProperty(match2.placeholders, _key)) {\n        res.placeholders[_key] = match2.placeholders[_key];\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   */\n\n\n  function combineChildMatches(list1, list2) {\n    var res = [];\n\n    if (list1.length === 0 || list2.length === 0) {\n      return res;\n    }\n\n    var merged;\n\n    for (var i1 = 0; i1 < list1.length; i1++) {\n      for (var i2 = 0; i2 < list2.length; i2++) {\n        merged = mergeMatch(list1[i1], list2[i2]);\n\n        if (merged) {\n          res.push(merged);\n        }\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   * Returns a list of unique matches.\n   */\n\n\n  function mergeChildMatches(childMatches) {\n    if (childMatches.length === 0) {\n      return childMatches;\n    }\n\n    var sets = childMatches.reduce(combineChildMatches);\n    var uniqueSets = [];\n    var unique = {};\n\n    for (var i = 0; i < sets.length; i++) {\n      var s = JSON.stringify(sets[i]);\n\n      if (!unique[s]) {\n        unique[s] = true;\n        uniqueSets.push(sets[i]);\n      }\n    }\n\n    return uniqueSets;\n  }\n  /**\n   * Determines whether node matches rule.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param {Object} context -- provides assumed properties of operators\n   * @param {Boolean} isSplit -- whether we are in process of splitting an\n   *                    n-ary operator node into possible binary combinations.\n   *                    Defaults to false.\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _ruleMatch(rule, node, context, isSplit) {\n    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')\n    //    console.log('rule = ' + rule)\n    //    console.log('node = ' + node)\n    //    console.log('Entering _ruleMatch(', rule.toString({parenthesis:'all'}), ', ', node.toString({parenthesis:'all'}), ', ', context, ')')\n    var res = [{\n      placeholders: {}\n    }];\n\n    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {\n      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly\n      if (rule instanceof OperatorNode) {\n        if (rule.op !== node.op || rule.fn !== node.fn) {\n          return [];\n        }\n      } else if (rule instanceof FunctionNode) {\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } // rule and node match. Search the children of rule and node.\n\n\n      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node, context) && node.args.length === rule.args.length || isSplit) {\n        // Expect non-associative operators to match exactly,\n        // except in any order if operator is commutative\n        var childMatches = [];\n\n        for (var i = 0; i < rule.args.length; i++) {\n          var childMatch = _ruleMatch(rule.args[i], node.args[i], context);\n\n          if (childMatch.length === 0) {\n            // Child did not match, so stop searching immediately\n            break;\n          } // The child matched, so add the information returned from the child to our result\n\n\n          childMatches.push(childMatch);\n        }\n\n        if (childMatches.length !== rule.args.length) {\n          if (!isCommutative(node, context) || // exact match in order needed\n          rule.args.length === 1) {\n            // nothing to commute\n            return [];\n          }\n\n          if (rule.args.length > 2) {\n            /* Need to generate all permutations and try them.\n             * It's a bit complicated, and unlikely to come up since there\n             * are very few ternary or higher operators. So punt for now.\n             */\n            throw new Error('permuting >2 commutative non-associative rule arguments not yet implemented');\n          }\n          /* Exactly two arguments, try them reversed */\n\n\n          var leftMatch = _ruleMatch(rule.args[0], node.args[1], context);\n\n          if (leftMatch.length === 0) {\n            return [];\n          }\n\n          var rightMatch = _ruleMatch(rule.args[1], node.args[0], context);\n\n          if (rightMatch.length === 0) {\n            return [];\n          }\n\n          childMatches = [leftMatch, rightMatch];\n        }\n\n        res = mergeChildMatches(childMatches);\n      } else if (node.args.length >= 2 && rule.args.length === 2) {\n        // node is flattened, rule is not\n        // Associative operators/functions can be split in different ways so we check if the rule matches each\n        // them and return their union.\n        var splits = getSplits(node, context);\n        var splitMatches = [];\n\n        for (var _i2 = 0; _i2 < splits.length; _i2++) {\n          var matchSet = _ruleMatch(rule, splits[_i2], context, true); // recursing at the same tree depth here\n\n\n          splitMatches = splitMatches.concat(matchSet);\n        }\n\n        return splitMatches;\n      } else if (rule.args.length > 2) {\n        throw Error('Unexpected non-binary associative function: ' + rule.toString());\n      } else {\n        // Incorrect number of arguments in rule and node, so no match\n        return [];\n      }\n    } else if (rule instanceof SymbolNode) {\n      // If the rule is a SymbolNode, then it carries a special meaning\n      // according to the first character of the symbol node name.\n      // c.* matches a ConstantNode\n      // n.* matches any node\n      if (rule.name.length === 0) {\n        throw new Error('Symbol in rule has 0 length...!?');\n      }\n\n      if (SUPPORTED_CONSTANTS[rule.name]) {\n        // built-in constant must match exactly\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {\n        // rule matches _anything_, so assign this node to the rule.name placeholder\n        // Assign node to the rule.name placeholder.\n        // Our parent will check for matches among placeholders.\n        res[0].placeholders[rule.name] = node;\n      } else if (rule.name[0] === 'v') {\n        // rule matches any variable thing (not a ConstantNode)\n        if (!isConstantNode(node)) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting something other than a ConstantNode\n          return [];\n        }\n      } else if (rule.name[0] === 'c') {\n        // rule matches any ConstantNode\n        if (node instanceof ConstantNode) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting a ConstantNode\n          return [];\n        }\n      } else {\n        throw new Error('Invalid symbol in rule: ' + rule.name);\n      }\n    } else if (rule instanceof ConstantNode) {\n      // Literal constant must match exactly\n      if (!equal(rule.value, node.value)) {\n        return [];\n      }\n    } else {\n      // Some other node was encountered which we aren't prepared for, so no match\n      return [];\n    } // It's a match!\n    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')\n\n\n    return res;\n  }\n  /**\n   * Determines whether p and q (and all their children nodes) are identical.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _exactMatch(p, q) {\n    if (p instanceof ConstantNode && q instanceof ConstantNode) {\n      if (!equal(p.value, q.value)) {\n        return false;\n      }\n    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {\n      if (p.name !== q.name) {\n        return false;\n      }\n    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {\n      if (p instanceof OperatorNode) {\n        if (p.op !== q.op || p.fn !== q.fn) {\n          return false;\n        }\n      } else if (p instanceof FunctionNode) {\n        if (p.name !== q.name) {\n          return false;\n        }\n      }\n\n      if (p.args.length !== q.args.length) {\n        return false;\n      }\n\n      for (var i = 0; i < p.args.length; i++) {\n        if (!_exactMatch(p.args[i], q.args[i])) {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  return simplify;\n});"]},"metadata":{},"sourceType":"module"}